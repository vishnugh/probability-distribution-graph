{"version":3,"sources":["utils/math-utils.js","binomial-distribution/BinomialGraph.js","common-components/SliderInputForm.js","binomial-distribution/SimulationBox.js","binomial-distribution/BinomialHome.js","App.js","reportWebVitals.js","index.js"],"names":["binomialDistribution","n","p","results","i","prob","combination","Math","pow","push","x","simulateBinomialDistribution","iterations","j","total","random","r","factorial","intervalID","BinomialGraph","scaleYaxis","showSimulation","numberOfIteration","useState","data","Setdata","maxProbability","SetMaxProbability","iterationStep","useEffect","pmf","probabilities","map","max","simResults","clearInterval","setInterval","simResultsByPart","s","newData","h","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","id","x1","y1","x2","y2","spreadMethod","offset","stopColor","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","type","yAxisId","orientation","stroke","domain","Tooltip","Legend","verticalAlign","Bar","fill","Brush","SliderInputForm","min","step","onChange","value","title","className","style","display","SimulationBox","onSimulate","Button","disabled","onClick","BinomialHome","setP","setN","setScaleYaxis","setShowSimulation","setNumberOfIterations","e","parseFloat","target","background","borderRadius","boxShadow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yWAAaA,EAAuB,SAACC,EAAGC,GAGpC,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIH,EAAI,EAAGG,IAAK,CAC5B,IAAMC,EAAOC,EAAYL,EAAGG,GAAKG,KAAKC,IAAIN,EAAGE,GAAKG,KAAKC,IAAK,EAAEN,EAAID,EAAIG,GACtED,EAAQM,KAAK,CAACP,EAAGG,EAAMK,EAAGN,IAE9B,OAAOD,GAGEQ,EAA+B,SAACV,EAAGC,EAAGU,GAI/C,IAFA,IAAIT,EAAU,GAELU,EAAI,EAAGA,GAAKZ,EAAGY,IACpBV,EAAQU,GAAK,EAIjB,IAAK,IAAIT,EAAI,EAAGA,EAAIQ,EAAYR,IAAK,CAEjC,IADA,IAAIU,EAAQ,EACHD,EAAI,EAAGA,GAAKZ,EAAGY,IACpBC,GAAUP,KAAKQ,SAAWb,EAAI,EAAI,EAEtCC,EAAQW,IAAU,EAEtB,OAAOX,GAIEG,EAAc,SAACL,EAAGe,GAC3B,OAAOC,EAAUhB,IAAMgB,EAAUD,GAAKC,EAAUhB,EAAIe,KAG3CC,EAAY,SAAZA,EAAahB,GACtB,OAAIA,GAAK,EACE,EAEJA,EAAIgB,EAAUhB,EAAI,I,OCjCzBiB,EAAa,KAkHFC,EA7GO,SAAC,GAA+F,IAAD,IAA5FlB,SAA4F,MAAxF,GAAwF,MAApFC,SAAoF,MAAhF,GAAgF,MAA3EkB,kBAA2E,aAAvDC,sBAAuD,aAA/BC,yBAA+B,MAAX,IAAW,EAEjH,EAAwBC,mBAASvB,EAAqBC,EAAGC,IAAzD,mBAAOsB,EAAP,KAAaC,EAAb,KACA,EAA4CF,mBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAGIC,EAAgB,EA8DpB,OA5DAC,qBAAU,WACN,IAAMC,EAAM9B,EAAqBC,EAAGC,GAC9B6B,EAAgBD,EAAIE,KAAI,SAAA9B,GAAC,OAAIA,EAAEA,KACrCyB,EAAkBpB,KAAK0B,IAAL,MAAA1B,KAAI,YAAQwB,KAE9BN,EAAQK,KACT,CAAC7B,EAAGC,IAEP2B,qBAAU,WACN,GAAIR,EAAgB,CAGhB,IADA,IAAMa,EAAa,GACV9B,EAAI,EAAGA,EAvBD,GAuByBA,IACpC8B,EAAWzB,KAAKE,EAA6BV,EAAGC,EAAGoB,EAxBxC,KA2BXJ,GACAiB,cAAcjB,GAGlBA,EAAakB,aAAY,WAGrB,IADA,IAAIC,EAAmB,GACdjC,EAAI,EAAGA,EAAIwB,EAAexB,IAC/B,IAAK,IAAIkC,KAAKJ,EAAW9B,GACrBiC,EAAiBC,IAAMD,EAAiBC,GAAKD,EAAiBC,GAAK,GAAMJ,EAAW9B,GAAGkC,GAI/F,IAAMC,EAAUf,EAAKQ,KAAI,SAAA9B,GAAC,kCAAUA,GAAV,IAAasC,EAAIH,EAAiBnC,EAAEQ,QAC9De,EAAQc,KAERX,EA3CW,IA8CPO,cAAcjB,KA/Cf,SAkDJ,CACHiB,cAAcjB,GACd,IAAMqB,EAAUf,EAAKQ,KAAI,SAAA9B,GAAC,kCAAUA,GAAV,IAAasC,EAAI,OAC3Cf,EAAQc,GAGZ,OAAO,WACHJ,cAAcjB,MAEnB,CAACG,IAcA,cAACoB,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,IAA1C,SACA,eAACC,EAAA,EAAD,CAAUpB,KAAMA,EAAMqB,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,IAArE,UACI,iCACI,iCACAC,GAAG,OACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,OACHC,aAAa,UANb,UAOA,sBAAMC,OAAO,IAAIC,UAAU,YAC3B,sBAAMD,OAAO,IAAIC,UAAU,eAG3B,iCACAP,GAAG,WACHC,GAAG,IACHC,GAAG,IACHC,GAAG,IACHC,GAAG,OACHC,aAAa,UANb,UAOA,sBAAMC,OAAO,IAAIC,UAAU,YAC3B,sBAAMD,OAAO,IAAIC,UAAU,kBAG/B,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,MACf,cAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,QAAQ,OAAOC,YAAY,OAAOC,OAAO,UAAUC,OAAQ,CAAC,EAAG/C,EAAa,OAAS,KAC1G,cAAC0C,EAAA,EAAD,CAAOC,KAAK,SAASC,QAAQ,QAAQC,YAAY,QAAQC,OAAO,UAAUC,OAAQ,CAAC,EAAG/C,EAAaM,EAAiBJ,EAAoBA,KACxI,cAAC8C,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQC,cAAc,WACtB,cAACC,EAAA,EAAD,CAAKP,QAAQ,OAAOH,QAAQ,IAAIW,KAAK,eACpCnD,EAAiB,cAACkD,EAAA,EAAD,CAAKV,QAAQ,IAAIG,QAAQ,QAAQQ,KAAK,mBAAsB,KAC7EvE,GAxGY,GAwGY,cAACwE,EAAA,EAAD,CAAOZ,QAAQ,IAAIlB,OAAQ,GAAIuB,OAAO,YAAe,WC/F3EQ,EAfS,SAAC,GAA+E,IAAD,IAA5EC,WAA4E,MAAtE,EAAsE,MAAnE1C,WAAmE,MAA7D,EAA6D,MAA1D2C,YAA0D,MAAnD,IAAmD,MAA7CC,gBAA6C,MAAlC,aAAkC,EAAvBC,EAAuB,EAAvBA,MAAuB,IAAhBC,aAAgB,MAAR,GAAQ,EACnG,OACI,sBAAKC,UAAU,kBAAf,UACKD,GAAgB,KACjB,gCACI,+BAAOJ,IACH,uBAAOZ,KAAK,QAAQkB,MAAO,CAACC,QAAQ,UAAWP,IAAKA,EAAK1C,IAAKA,EAAK2C,KAAMA,EAAMC,SAAUA,EAAUC,MAAOA,IAC9G,+BAAO7C,OAGX,uBAAO8B,KAAK,SAASY,IAAKA,EAAK1C,IAAKA,EAAK4C,SAAUA,EAAUC,MAAOA,Q,SCAjEK,EATO,SAAC,GAAqE,IAApE7D,EAAmE,EAAnEA,kBAAmBuD,EAAgD,EAAhDA,SAAUxD,EAAsC,EAAtCA,eAAgB+D,EAAsB,EAAtBA,WAAYnF,EAAU,EAAVA,EAAGC,EAAO,EAAPA,EAChF,OAAQ,sBAAK8E,UAAU,kBAAf,mCACkB,uBAAOjB,KAAK,SAAUY,IAAK,EAAG1C,IAAK,IAAS2C,KAAM,EAAGC,SAAUA,EAAUC,MAAOxD,IACtG,cAAC+D,EAAA,EAAD,CAAQC,SAAUjE,EAAgBkE,QAASH,EAA3C,sBACC/D,EAAc,kBAAcpB,EAAd,8CAAqDC,EAArD,YAA0DoB,EAA1D,aAAwF,SC+DhGkE,G,OA7DM,WACjB,MAAkBjE,mBAAS,IAA3B,mBAAOrB,EAAP,KAAUuF,EAAV,KACA,EAAkBlE,mBAAS,IAA3B,mBAAOtB,EAAP,KAAUyF,EAAV,KACA,EAAoCnE,oBAAS,GAA7C,mBAAOH,EAAP,KAAmBuE,EAAnB,KACA,EAA4CpE,oBAAS,GAArD,mBAAOF,EAAP,KAAuBuE,EAAvB,KACA,EAAmDrE,mBAAS,KAA5D,mBAAOD,EAAP,KAA0BuE,EAA1B,KAGAhE,qBAAU,WACN+D,GAAkB,KACnB,CAAC3F,EAAGC,IA4BP,OAAQ,qCACJ,sDACA,sBAAK8E,UAAU,WAAf,UACI,sBAAKA,UAAU,WAAf,UACI,cAAC,EAAD,CAAiBH,SA7BN,SAACiB,GACpBL,EAAKM,WAAWD,EAAEE,OAAOlB,SA4B0B5B,GAAG,SAAS4B,MAAO5E,EAAGyE,IAAK,EAAG1C,IAAK,EAAG2C,KAAM,IAAMG,MAAM,8BACnG,cAAC,EAAD,CAAiBF,SA1BX,SAACiB,GACXA,EAAEE,OAAOlB,MAAQ,EACjBY,EAAK,GACEI,EAAEE,OAAOlB,MAtBd,IAuBFY,EAAKK,WAvBH,MAyBFL,EAAKK,WAAWD,EAAEE,OAAOlB,SAoBiBA,MAAO7E,EAAG0E,IAAK,EAAG1C,IAAK,IAAK2C,KAAM,EAAGG,MAAM,wBACjF,cAAC,EAAD,CAAezD,kBAAmBA,EAAmBuD,SAjB9B,SAACiB,GAChCF,GAAkB,GACfE,EAAEE,OAAOlB,OAAQ,GAAKgB,EAAEE,OAAOlB,OAAS,KACvCe,EAAsBE,WAAWD,EAAEE,OAAOlB,SAcqDzD,eAAgBA,EAAgB+D,WAVpH,WACfQ,GAAkB,IASyI3F,EAAGA,EAAGC,EAAGA,IAC5J,sBAAK8E,UAAU,kBAAf,0BAEI,qBAAKA,UAAU,yBAAf,SACA,uBAAOA,UAAU,mBAAmBjB,KAAK,WAAWc,SAAU,kBAAMc,GAAevE,cAK3F,qBAAK6D,MAAO,CAACpC,OAAO,OAAQH,MAAM,MAAOuD,WAAW,QAASC,aAAa,OAAQC,UAAW,2FAA7F,SACI,cAAC,EAAD,CAAOlG,EAAGA,EAAGC,EAAGA,EAAGkB,WAAYA,EAAYC,eAAgBA,EAAgBC,kBAAmBA,cCrC/F8E,MAtBf,WACE,OACE,8BACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82e1c24f.chunk.js","sourcesContent":["export const binomialDistribution = (n, p) => {\n    let results = [];\n\n    for (let i = 0; i < n + 1; i++) {\n        const prob = combination(n, i) * Math.pow(p, i) * Math.pow((1-p), n - i);\n        results.push({p: prob, x: i});\n    }\n    return results;\n}\n\nexport const simulateBinomialDistribution = (n, p, iterations) => {\n\n    let results = {};\n\n    for (let j = 0; j <= n; j++) {\n        results[j] = 0;\n    }\n\n\n    for (let i = 0; i < iterations; i++) {\n        let total = 0;\n        for (let j = 1; j <= n; j++) {\n            total += (Math.random() < p ? 1 : 0);\n        }\n        results[total] += 1;\n    }\n    return results;\n}\n\n\nexport const combination = (n, r) => {\n    return factorial(n) / (factorial(r) * factorial(n - r));\n}\n\nexport const factorial = (n) => {\n    if (n <= 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}","import React, { useEffect, useState } from 'react';\n\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, CartesianGrid, ResponsiveContainer, Brush } from 'recharts';\nimport { binomialDistribution, simulateBinomialDistribution } from '../utils/math-utils';\n\nlet intervalID = null;\nconst TIME_DELAY = 100;\nconst NO_OF_SUBITERATION = 10;\nconst SHOW_BRUSH_LIMIT = 70;\n\nconst BinomialGraph = ({ n = 10, p = 0.5, scaleYaxis = false, showSimulation = false, numberOfIteration = 1000 }) => {\n\n    const [data, Setdata] = useState(binomialDistribution(n, p));\n    const [maxProbability, SetMaxProbability] = useState(1);\n\n    \n    let iterationStep = 0;\n\n    useEffect(() => {\n        const pmf = binomialDistribution(n, p); \n        const probabilities = pmf.map(p => p.p);\n        SetMaxProbability(Math.max(...probabilities));\n\n        Setdata(pmf);\n    }, [n, p])\n\n    useEffect(() => {\n        if (showSimulation) {\n\n            const simResults = [];\n            for (let i = 0; i < NO_OF_SUBITERATION; i++) {\n                simResults.push(simulateBinomialDistribution(n, p, numberOfIteration/NO_OF_SUBITERATION));\n            }\n\n            if (intervalID) {\n                clearInterval(intervalID);\n            }\n            // Start simulation\n            intervalID = setInterval(() => {\n\n                let simResultsByPart = {};\n                for (let i = 0; i < iterationStep; i++) {\n                    for (let s in simResults[i]) {\n                        simResultsByPart[s] = (simResultsByPart[s] ? simResultsByPart[s] : 0 ) + simResults[i][s];\n                    }  \n                }\n                \n                const newData = data.map(p => ({ ...p, h:  simResultsByPart[p.x] }));\n                Setdata(newData);\n\n                iterationStep++;\n\n                if (iterationStep > NO_OF_SUBITERATION ){\n                    clearInterval(intervalID);\n                }\n            }, TIME_DELAY);\n        } else {\n            clearInterval(intervalID);\n            const newData = data.map(p => ({ ...p, h:  0}));\n            Setdata(newData);\n        }\n\n        return () => {\n            clearInterval(intervalID);\n        }\n    }, [showSimulation])\n\n\n    // const LerpZoom = () => {\n    //     if (Math.abs(targetZoom - zoomLevel) < EPSILON) {\n    //         clearInterval(intervalID);\n    //         return;\n    //     }\n\n    //     setZoomLevel((targetZoom + zoomLevel)/2)\n    // }\n\n\n    return (\n        <ResponsiveContainer width=\"100%\" height={500}>\n        <BarChart data={data} margin={{ top: 60, right: 30, left: 0, bottom: 40 }}>\n            <defs>\n                <linearGradient\n                id=\"main\"\n                x1=\"0\"\n                y1=\"0\"\n                x2=\"0\"\n                y2=\"100%\"\n                spreadMethod=\"reflect\">\n                <stop offset=\"0\" stopColor=\"#8F75FF\" />\n                <stop offset=\"1\" stopColor=\"#B721FF\" />\n                </linearGradient>\n\n                <linearGradient\n                id=\"simulate\"\n                x1=\"0\"\n                y1=\"0\"\n                x2=\"0\"\n                y2=\"100%\"\n                spreadMethod=\"reflect\">\n                <stop offset=\"0\" stopColor=\"#85FFBD\" />\n                <stop offset=\"1\" stopColor=\"#CBFD9B\" />\n                </linearGradient>\n            </defs>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"x\" />\n            <YAxis type=\"number\" yAxisId=\"left\" orientation=\"left\" stroke=\"#8884d8\" domain={[0, scaleYaxis ? 'auto' : 1]} />\n            <YAxis type=\"number\" yAxisId=\"right\" orientation=\"right\" stroke=\"#82ca9d\" domain={[0, scaleYaxis ? maxProbability * numberOfIteration : numberOfIteration]} /> \n            <Tooltip />\n            <Legend verticalAlign=\"bottom\"/>\n            <Bar yAxisId=\"left\" dataKey=\"p\" fill=\"url(#main)\" />\n            {showSimulation ? <Bar dataKey=\"h\" yAxisId=\"right\" fill=\"url(#simulate)\" /> : null}\n            {n >= SHOW_BRUSH_LIMIT ? <Brush dataKey=\"x\" height={30} stroke=\"#8884d8\" /> : null}\n        </BarChart>\n        </ResponsiveContainer>\n    );\n}\n\n\nexport default BinomialGraph;","import React from 'react';\n\nconst SliderInputForm = ({ min = 0, max = 1, step = 0.01, onChange = () => { }, value, title = ''}) => {\n    return (\n        <div className=\"SliderInputForm\">\n            {title ? title : null}\n            <div>\n                <span>{min}</span>\n                    <input type=\"range\" style={{display:\"inline\"}} min={min} max={max} step={step} onChange={onChange} value={value} />\n                <span>{max}</span>\n            </div>\n            {/* <label htmlFor=\"slider\" >{value}</label> */}\n            <input type=\"number\" min={min} max={max} onChange={onChange} value={value} />\n        </div>\n    );\n}\n\nexport default SliderInputForm;","import React from 'react';\nimport {Button} from 'react-bootstrap';\n\nconst SimulationBox = ({numberOfIteration, onChange, showSimulation, onSimulate, n, p}) => {\n    return (<div className=\"SliderInputForm\">\n        Number of Iterations: <input type=\"number\"  min={0} max={1000000} step={1} onChange={onChange} value={numberOfIteration}/>\n        <Button disabled={showSimulation} onClick={onSimulate}>Simulate</Button>\n        {showSimulation ? `Tossing ${n} coins with probability of Heads = ${p} ${numberOfIteration} times...`: null}\n        </div>\n        );\n}\n\nexport default SimulationBox;","import React, { useState, useEffect } from 'react';\n\nimport Graph from './BinomialGraph';\nimport SliderInputForm from '../common-components/SliderInputForm';\nimport SimulationBox from './SimulationBox';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst MAX_N = 150;\n\nconst BinomialHome = () => {\n    const [p, setP] = useState(0.5);\n    const [n, setN] = useState(10);\n    const [scaleYaxis, setScaleYaxis] = useState(false);\n    const [showSimulation, setShowSimulation] = useState(false);\n    const [numberOfIteration, setNumberOfIterations] = useState(1000);\n\n\n    useEffect(() => {\n        setShowSimulation(false);\n    }, [n, p])\n\n\n    const OnSliderChange = (e) => {\n        setP(parseFloat(e.target.value));\n    }\n\n    const OnNchange = (e) => {\n        if (e.target.value < 0) {\n            setN(0);\n        } else if (e.target.value > MAX_N) {\n            setN(parseFloat(MAX_N));\n        } else {\n            setN(parseFloat(e.target.value));\n        }\n    }\n\n    const OnNumberOfIterationsChange = (e) => {\n        setShowSimulation(false);\n        if(e.target.value >=0 && e.target.value <= 1000000){\n            setNumberOfIterations(parseFloat(e.target.value));\n        }\n    }\n\n    const onSimulate = () => {\n        setShowSimulation(true);\n    }\n\n    return (<>\n        <h1>Binomial Distibution</h1>\n        <div className=\"grid-row\">\n            <div className=\"form-col\">\n                <SliderInputForm onChange={OnSliderChange} id=\"slider\" value={p} min={0} max={1} step={0.01} title=\"p: Probability of Success\" />\n                <SliderInputForm onChange={OnNchange} value={n} min={0} max={150} step={1} title=\"n: Number of Trials\" />\n                <SimulationBox numberOfIteration={numberOfIteration} onChange={OnNumberOfIterationsChange} showSimulation={showSimulation} onSimulate={onSimulate} n={n} p={p}/>\n                <div className=\"SliderInputForm\">\n                    Scale Y Axis: \n                    <div className=\"form-check form-switch\"> \n                    <input className=\"form-check-input\" type=\"checkbox\" onChange={() => setScaleYaxis(!scaleYaxis)} />\n                    \n                    </div>\n                </div>\n            </div>\n            <div style={{margin:\"5rem\", width:\"60%\", background:\"white\", borderRadius:\"15px\", boxShadow: \"rgba(136, 165, 191, 0.48) 6px 2px 16px 0px, rgba(255, 255, 255, 0.8) -6px -2px 16px 0px\"}}>\n                <Graph n={n} p={p} scaleYaxis={scaleYaxis} showSimulation={showSimulation} numberOfIteration={numberOfIteration}/>\n            </div>\n        </div>\n        {/* <input type=\"checkbox\" onChange={() => setShowSimulation(!showSimulation)} /> */}\n    </>)\n}\n\nexport default BinomialHome;","// import logo from './logo.svg';\nimport './App.css';\nimport BinomialHome from './binomial-distribution/BinomialHome';\n\nfunction App() {\n  return (\n    <div>\n      <BinomialHome />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}