{"version":3,"sources":["utils/math-utils.js","binomial-distribution/BinomialGraph.js","common-components/SliderInputForm.js","binomial-distribution/SimulationBox.js","binomial-distribution/BinomialHome.js","App.js","reportWebVitals.js","index.js"],"names":["binomialDistribution","n","p","results","mean","sd","Math","sqrt","i","prob","combination","pow","aproxProb","normalDistribution","push","np","x","simulateBinomialDistribution","iterations","j","total","random","r","factorial","E","PI","intervalID","BinomialGraph","scaleYaxis","showSimulation","numberOfIteration","showNormalAproximation","useState","data","Setdata","maxProbability","SetMaxProbability","iterationStep","useEffect","pmf","probabilities","map","max","simResults","clearInterval","setInterval","simResultsByPart","s","newData","h","ResponsiveContainer","width","height","ComposedChart","margin","top","right","left","bottom","id","x1","y1","x2","y2","spreadMethod","offset","stopColor","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","type","yAxisId","orientation","stroke","domain","Tooltip","Legend","verticalAlign","Bar","name","fill","Line","strokeWidth","Brush","SliderInputForm","min","step","onChange","value","title","className","style","display","SimulationBox","onSimulate","Button","disabled","onClick","BinomialHome","setP","setN","setScaleYaxis","setShowSimulation","setNumberOfIterations","setShowNormalAproximation","e","parseFloat","target","background","borderRadius","boxShadow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.461d875d.chunk.js","sourcesContent":["export const binomialDistribution = (n, p) => {\n    let results = [];\n\n    // For Normal Approximation\n    const mean = n * p;\n    const sd = Math.sqrt(n * p * (1 - p));\n    // \n\n    for (let i = 0; i < n + 1; i++) {\n        const prob = combination(n, i) * Math.pow(p, i) * Math.pow((1 - p), n - i);\n        const aproxProb = normalDistribution(i, mean, sd);\n        results.push({ p: prob, np: aproxProb, x: i });\n    }\n    return results;\n}\n\nexport const simulateBinomialDistribution = (n, p, iterations) => {\n\n    let results = {};\n\n    for (let j = 0; j <= n; j++) {\n        results[j] = 0;\n    }\n\n\n    for (let i = 0; i < iterations; i++) {\n        let total = 0;\n        for (let j = 1; j <= n; j++) {\n            total += (Math.random() < p ? 1 : 0);\n        }\n        results[total] += 1;\n    }\n    return results;\n}\n\n\nexport const combination = (n, r) => {\n    return factorial(n) / (factorial(r) * factorial(n - r));\n}\n\nexport const factorial = (n) => {\n    if (n <= 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nexport const normalDistribution = (x, mean = 0, sd = 1) => {\n    return Math.pow(Math.E, -0.5 * Math.pow((x - mean) / sd, 2)) / (sd * Math.sqrt(2 * Math.PI))\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { Bar, XAxis, YAxis, Tooltip, Legend, CartesianGrid, ResponsiveContainer, Brush, ComposedChart, Line } from 'recharts';\nimport { binomialDistribution, simulateBinomialDistribution } from '../utils/math-utils';\n\nlet intervalID = null;\nconst TIME_DELAY = 100;\nconst NO_OF_SUBITERATION = 10;\nconst SHOW_BRUSH_LIMIT = 70;\n\nconst BinomialGraph = ({ n = 10, p = 0.5, scaleYaxis = false, showSimulation = false, numberOfIteration = 1000, showNormalAproximation = false }) => {\n\n    const [data, Setdata] = useState(binomialDistribution(n, p));\n    const [maxProbability, SetMaxProbability] = useState(1);\n\n\n    let iterationStep = 0;\n\n    useEffect(() => {\n        const pmf = binomialDistribution(n, p);\n        const probabilities = pmf.map(p => p.p);\n        SetMaxProbability(Math.max(...probabilities));\n\n        Setdata(pmf);\n    }, [n, p])\n\n    useEffect(() => {\n        if (showSimulation) {\n\n            const simResults = [];\n            for (let i = 0; i < NO_OF_SUBITERATION; i++) {\n                simResults.push(simulateBinomialDistribution(n, p, numberOfIteration / NO_OF_SUBITERATION));\n            }\n\n            if (intervalID) {\n                clearInterval(intervalID);\n            }\n            // Start simulation\n            intervalID = setInterval(() => {\n\n                let simResultsByPart = {};\n                for (let i = 0; i < iterationStep; i++) {\n                    for (let s in simResults[i]) {\n                        simResultsByPart[s] = (simResultsByPart[s] ? simResultsByPart[s] : 0) + simResults[i][s];\n                    }\n                }\n\n                const newData = data.map(p => ({ ...p, h: simResultsByPart[p.x] }));\n                Setdata(newData);\n\n                iterationStep++;\n\n                if (iterationStep > NO_OF_SUBITERATION) {\n                    clearInterval(intervalID);\n                }\n            }, TIME_DELAY);\n        } else {\n            clearInterval(intervalID);\n            const newData = data.map(p => ({ ...p, h: 0 }));\n            Setdata(newData);\n        }\n\n        return () => {\n            clearInterval(intervalID);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [showSimulation])\n\n\n    return (\n        <ResponsiveContainer width=\"100%\" height={500}>\n            <ComposedChart\n                data={data}\n                margin={{ top: 60, right: 30, left: 0, bottom: 40 }}\n            >\n                <defs>\n                    <linearGradient\n                        id=\"main\"\n                        x1=\"0\"\n                        y1=\"0\"\n                        x2=\"0\"\n                        y2=\"100%\"\n                        spreadMethod=\"reflect\">\n                        <stop offset=\"0\" stopColor=\"#8F75FF\" />\n                        <stop offset=\"1\" stopColor=\"#B721FF\" />\n                    </linearGradient>\n\n                    <linearGradient\n                        id=\"simulate\"\n                        x1=\"0\"\n                        y1=\"0\"\n                        x2=\"0\"\n                        y2=\"100%\"\n                        spreadMethod=\"reflect\">\n                        <stop offset=\"0\" stopColor=\"#85FFBD\" />\n                        <stop offset=\"1\" stopColor=\"#CBFD9B\" />\n                    </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"x\" />\n                <YAxis type=\"number\" yAxisId=\"left\" orientation=\"left\" stroke=\"#8884d8\" domain={[0, scaleYaxis ? 'auto' : 1]} />\n                <YAxis type=\"number\" yAxisId=\"right\" orientation=\"right\" stroke=\"#82ca9d\" domain={[0, scaleYaxis ? maxProbability * numberOfIteration : numberOfIteration]} />\n                <Tooltip />\n                <Legend verticalAlign=\"bottom\" />\n                <Bar name=\"Probability\" yAxisId=\"left\" dataKey=\"p\" fill=\"url(#main)\" />\n                {showNormalAproximation ? <Line name=\"Approx Probability\" yAxisId=\"left\" type=\"monotone\" dataKey=\"np\" stroke=\"#82ca9d\" strokeWidth={2.5} /> : null}\n                {showSimulation ? <Bar name=\"Frequency of Heads\" dataKey=\"h\" yAxisId=\"right\" fill=\"url(#simulate)\" /> : null}\n                {n >= SHOW_BRUSH_LIMIT ? <Brush dataKey=\"x\" height={30} stroke=\"#8884d8\" /> : null}\n            </ComposedChart>\n        </ResponsiveContainer>\n    );\n}\n\n\nexport default BinomialGraph;","import React from 'react';\n\nconst SliderInputForm = ({ min = 0, max = 1, step = 0.01, onChange = () => { }, value, title = ''}) => {\n    return (\n        <div className=\"SliderInputForm\">\n            {title ? title : null}\n            <div>\n                <span>{min}</span>\n                    <input type=\"range\" style={{display:\"inline\"}} min={min} max={max} step={step} onChange={onChange} value={value} />\n                <span>{max}</span>\n            </div>\n            {/* <label htmlFor=\"slider\" >{value}</label> */}\n            <input type=\"number\" min={min} max={max} onChange={onChange} value={value} />\n        </div>\n    );\n}\n\nexport default SliderInputForm;","import React from 'react';\nimport {Button} from 'react-bootstrap';\n\nconst SimulationBox = ({numberOfIteration, onChange, showSimulation, onSimulate, n, p}) => {\n    return (<div className=\"SliderInputForm\" width=\"250px\" height=\"200px\">\n        Number of Iterations: <input type=\"number\"  min={0} max={1000000} step={1} onChange={onChange} value={numberOfIteration}/>\n        <Button disabled={showSimulation} onClick={onSimulate}>Simulate</Button>\n        {showSimulation ? `Tossing ${n} coins with probability of Heads = ${p} ${numberOfIteration} times...`: null}\n        </div>\n        );\n}\n\nexport default SimulationBox;","import React, { useState, useEffect } from 'react';\n\nimport Graph from './BinomialGraph';\nimport SliderInputForm from '../common-components/SliderInputForm';\nimport SimulationBox from './SimulationBox';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst MAX_N = 150;\n\nconst BinomialHome = () => {\n    const [p, setP] = useState(0.5);\n    const [n, setN] = useState(10);\n    const [scaleYaxis, setScaleYaxis] = useState(false);\n    const [showSimulation, setShowSimulation] = useState(false);\n    const [numberOfIteration, setNumberOfIterations] = useState(1000);\n    const [showNormalAproximation, setShowNormalAproximation] = useState(false);\n\n\n    useEffect(() => {\n        setShowSimulation(false);\n    }, [n, p])\n\n\n    const OnSliderChange = (e) => {\n        setP(parseFloat(e.target.value));\n    }\n\n    const OnNchange = (e) => {\n        if (e.target.value < 0) {\n            setN(0);\n        } else if (e.target.value > MAX_N) {\n            setN(parseFloat(MAX_N));\n        } else {\n            setN(parseFloat(e.target.value));\n        }\n    }\n\n    const OnNumberOfIterationsChange = (e) => {\n        setShowSimulation(false);\n        if (e.target.value >= 0 && e.target.value <= 1000000) {\n            setNumberOfIterations(parseFloat(e.target.value));\n        }\n    }\n\n    const onSimulate = () => {\n        setShowSimulation(true);\n    }\n\n    return (<>\n        <h1>Binomial Distribution</h1>\n        <div className=\"grid-row\">\n            <div className=\"form-col\">\n                <div className=\"SliderInputForm\">\n                    Scale Y Axis:\n                    <div className=\"form-check form-switch\">\n                        <input className=\"form-check-input\" type=\"checkbox\" onChange={() => setScaleYaxis(!scaleYaxis)} />\n                    </div>\n                </div>\n                <SliderInputForm onChange={OnSliderChange} id=\"slider\" value={p} min={0} max={1} step={0.01} title=\"p: Probability of Success\" />\n                <SliderInputForm onChange={OnNchange} value={n} min={0} max={150} step={1} title=\"n: Number of Trials\" />\n                <div className=\"SliderInputForm\">\n                    Show Normal Approximation:\n                    <div className=\"form-check form-switch\">\n                        <input className=\"form-check-input\" type=\"checkbox\" onChange={() => setShowNormalAproximation(!showNormalAproximation)} />\n                    </div>\n                </div>\n                <SimulationBox numberOfIteration={numberOfIteration} onChange={OnNumberOfIterationsChange} showSimulation={showSimulation} onSimulate={onSimulate} n={n} p={p} />\n            </div>\n            <div style={{ margin: \"5rem\", width: \"60%\", background: \"white\", borderRadius: \"15px\", boxShadow: \"rgba(136, 165, 191, 0.48) 6px 2px 16px 0px, rgba(255, 255, 255, 0.8) -6px -2px 16px 0px\" }}>\n                <Graph n={n} p={p} scaleYaxis={scaleYaxis} showSimulation={showSimulation} numberOfIteration={numberOfIteration} showNormalAproximation={showNormalAproximation} />\n            </div>\n        </div>\n        {/* <input type=\"checkbox\" onChange={() => setShowSimulation(!showSimulation)} /> */}\n    </>)\n}\n\nexport default BinomialHome;","// import logo from './logo.svg';\nimport './App.css';\nimport BinomialHome from './binomial-distribution/BinomialHome';\n\nfunction App() {\n  return (\n    <div>\n      <BinomialHome />\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}